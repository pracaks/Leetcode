#include <iostream>
#include <utility>
#include <vector>
#include <queue>

using namespace std;
 struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode() : val(0), left(nullptr), right(nullptr) {}
      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
  };
 class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        queue<pair<TreeNode*,int>> qq; 
        vector<vector<int>> result;
        int level=0;
        if(root){
            qq.push(make_pair(root,level));
        }
         vector<int>row;
         while(!qq.empty()){             
           pair<TreeNode*,int>pp = qq.front();qq.pop();
            TreeNode* node = pp.first;
            int curLevel = pp.second;//0
             if(node->left)
                 qq.push({root->left,curLevel+1});
             if(node->right)
                 qq.push({root->right,curLevel+1});
             if(curLevel != level){
                 level++;
                 result.push_back(row);
                 row.clear();                 
             }  
             row.push_back(node->val); // row,3
             if(qq.empty())
                 result.push_back(row);
         }
          return result;  
    }
};
int main()
{
    cout<<"Hello World";
    TreeNode* node = nullptr;
    node = new TreeNode(3) ;
    node->left = new TreeNode(9);
    node->right = new TreeNode(20);
    node->right->left = new TreeNode(15);
    node->right->right = new TreeNode(7);
    Solution solve;
    vector<vector<int>> result=solve.levelOrder(node);
    for(int ii=0;ii<result.size();ii++)
    {
        cout<<"row : "<<ii<<endl;
        vector<int> rr = result[ii];
        for (int jj=0;jj<rr.size();jj++)
        {
            cout<<rr[jj]<<",";
        }
        cout<<endl;
    }
    return 0;
}
